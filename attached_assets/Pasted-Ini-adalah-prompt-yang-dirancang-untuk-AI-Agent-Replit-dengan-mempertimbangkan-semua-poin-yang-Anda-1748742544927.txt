Ini adalah prompt yang dirancang untuk AI Agent Replit, dengan mempertimbangkan semua poin yang Anda sebutkan:
Prompt untuk AI Agent Replit: Pengembangan MAVERNET Core (AI Multi-Unit, Aksi Nyata, API Gratis)
Konteks Proyek Anda:
Saya sedang mengembangkan sistem orkestrasi AI multi-unit bernama "MAVERNET Core". Konsepnya terinspirasi dari "Maverick Hunters" (seperti Zero) dari Mega Man. Sistem ini terdiri dari beberapa unit AI, dan tujuan utamanya adalah agar unit-unit ini dapat melakukan aksi nyata di dunia digital, tidak hanya simulasi.
Unit AI yang Sudah Ada (dan Peran Utamanya):
 * Zero (file: zero.py):
   * Peran: Unit Eksekutor Misi & Interaksi Utama.
   * Status Sekarang: Sudah memiliki dasar AI, manajemen memori persisten (data/memory_log.json), simulasi aksi otonom, dan kemampuan web_search yang sudah nyata (menggunakan requests dan BeautifulSoup).
 * XReplica (file: x.py):
   * Peran: Manajemen Data, Integrasi Webhook, Optimasi Log, Otomatisasi Spreadsheet.
   * Status Sekarang: File x.py mungkin masih kosong atau berisi definisi kelas dasar.
 * Nova (file: nova.py):
   * Peran: UI/UX, Visualisasi Data, Pengalaman Adaptif, Desain Antarmuka.
   * Status Sekarang: File nova.py mungkin masih kosong atau berisi definisi kelas dasar.
 * Oracle (file: oracle.py):
   * Peran: Analisis Prediktif, Pemetaan Strategi, Skenario Ancaman.
   * Status Sekarang: File oracle.py mungkin masih kosong atau berisi definisi kelas dasar.
File Orkestrasi Utama:
 * main.py: Berfungsi sebagai orkestrator utama sistem MAVERNET. Bertanggung jawab untuk menginisialisasi semua unit AI, memuat data sistem, dan menyediakan loop interaktif bagi pengguna untuk mengirimkan perintah.
Tujuan Pengembangan Anda dengan Bantuan AI Agent (Prioritas Berurutan):
Prioritas 1: Memastikan Struktur & Interaksi Sistem Optimal (Remix & Perbaiki main.py)
 * Tinjau dan Perbaiki main.py: Ambil kode main.py saya yang sekarang dan perbaiki/remix agar:
   * Memiliki loop interaktif Command Dashboard yang stabil dan tidak langsung berakhir.
   * Mampu mengarahkan perintah dari pengguna ke unit AI yang tepat (misalnya, "Zero, [perintah Zero]", "X, [perintah X]", "Nova, [perintah Nova]", "Oracle, [perintah Oracle]").
   * Mampu memproses perintah sistem global (misalnya, "System status", "Save all memory", "MaverNet shutdown").
   * Pastikan Zero tetap menjadi unit default untuk perintah yang tidak spesifik ditujukan ke unit lain.
   * JANGAN menimpa fungsi-fungsi inti yang sudah ada di main.py (get_all_missions, ai_autonomous_thinking, system_boot, load_all_data, system_status, save_all_memory, auto_github_sync), hanya perbaiki dan tambahkan yang diperlukan.
Prioritas 2: Implementasi Aksi Nyata untuk Unit Lain (Buat/Perbaiki file unit AI)
 * Untuk XReplica (di x.py):
   * Tambahkan kelas XReplica (jika belum ada).
   * Implementasikan kemampuan otomatisasi spreadsheet yang nyata. Carikan dan pandu saya untuk menggunakan library Python yang gratis (misalnya gspread untuk Google Sheets API, atau openpyxl untuk file Excel lokal).
   * Berikan contoh fungsi seperti read_spreadsheet(file_path) dan write_to_spreadsheet(file_path, data) di x.py.
   * Pastikan XReplica dapat diinisialisasi dan diinteraksi melalui main.py.
 * Untuk Nova (di nova.py):
   * Tambahkan kelas Nova (jika belum ada).
   * Implementasikan aksi nyata sederhana terkait visualisasi/UI. Contoh:
     * Membuat file HTML dasar untuk menampilkan output data secara terstruktur.
     * Menghasilkan gambar grafik sederhana (.png) menggunakan library seperti matplotlib atau plotly (jika gratis/mudah diintegrasikan di Replit) dari data yang diberikan, lalu menyimpannya ke file.
   * Pastikan Nova dapat diinisialisasi dan diinteraksi melalui main.py.
 * Untuk Oracle (di oracle.py):
   * Tambahkan kelas Oracle (jika belum ada).
   * Implementasikan aksi nyata sederhana terkait analisis. Contoh:
     * Membaca data dari file teks, melakukan perhitungan statistik dasar (rata-rata, min, max, dll.), dan menyimpan laporan hasilnya ke file teks lain.
     * Memproses daftar kata kunci dan menghasilkan "hubungan" atau "kategori" dasar (menggunakan Python standar).
   * Pastikan Oracle dapat diinisialisasi dan diinteraksi melalui main.py.
Prioritas 3: Panduan API Gratis & Sumber Daya
 * Untuk Otomatisasi YouTube:
   * Pandu saya tentang cara mengakses dan menggunakan YouTube Data API (gratis, dengan batasan kuota) untuk tugas-tugas dasar seperti mencari video, mendapatkan informasi channel, atau (jika memungkinkan) mengunggah video.
   * Berikan contoh dasar penggunaan API ini di dalam unit Zero (misalnya, sebagai tugas baru di execute_task).
   * Jelaskan langkah-langkah otentikasi (seperti mendapatkan API key/client ID).
 * Daftar requirements.txt: Sertakan daftar lengkap semua library Python yang dibutuhkan oleh semua unit AI dan main.py dalam file requirements.txt.
Instruksi Tambahan (Sangat Penting):
 * Hindari Penimpaan Penuh: Saat memberikan kode, fokuslah pada perbaikan atau penambahan ke kode yang sudah ada, bukan mengganti file secara keseluruhan, kecuali untuk bagian yang jelas-jelas perlu di-refactor (seperti loop if __name__ == "__main__": di main.py).
 * Modularitas: Pastikan setiap unit AI (Zero, X, Nova, Oracle) tetap modular dengan fungsionalitasnya di file .py masing-masing.
 * Asumsi interact() dan get_status(): Asumsikan bahwa semua unit (XReplica, Nova, Oracle) akan memiliki metode interact(command) dan get_status() agar main.py dapat berinteraksi dengan mereka secara konsisten. Jika tidak ada, tambahkan stub (implementasi kosong) untuk itu.
 * Penjelasan Kode: Berikan penjelasan yang jelas untuk setiap bagian kode baru atau perubahan, dengan bahasa yang mudah dipahami.
 * Langkah Demi Langkah: Pandu saya langkah demi langkah bagaimana mengimplementasikan saran Anda di Replit.
Dengan prompt ini, AI Agent Replit seharusnya memiliki semua informasi yang dibutuhkan untuk membantu Anda mengembangkan MAVERNET Core sesuai visi Anda!
