Ini adalah prompt komprehensif yang bisa Anda berikan langsung ke AI Agent Replit Anda.
Prompt untuk AI Agent Replit: Pengembang Sistem MAVERNET Core (Multi-Unit, Multi-Kemampuan Nyata, Interaksi Fleksibel, Tanpa Menimpa Kode Esensial)
Konteks Proyek Saat Ini:
Saya sedang mengembangkan sistem orkestrasi AI multi-unit bernama "MAVERNET Core". Ini adalah proyek Python di Replit. Konsepnya terinspirasi dari "Maverick Hunters" (seperti Zero) dari Mega Man.
 * Unit AI yang Ada: Zero.py, x.py, nova.py, oracle.py. Semua ini sudah memiliki struktur kelas, manajemen memori persisten (data/), simulasi aksi otonom, dan integrasi Gemini AI sebagai fallback untuk pertanyaan umum.
 * main.py: Ini adalah orkestrator utama (MaverNetSystem). Sudah menginisialisasi unit-unit, memuat data sistem, dan memiliki loop interaktif dasar.
 * API Key Gemini: Sudah disimpan di Replit Secrets dengan nama GEMINI_API_KEY.
 * Library Terinstal: Asumsikan google-generativeai, requests, beautifulsoup4, openpyxl, pandas sudah terinstal.
Tujuan Saya (Pengguna) untuk Sistem MAVERNET:
Saya ingin sistem MAVERNET saya berfungsi sebagai Command Dashboard interaktif yang canggih, di mana:
 * Pengguna dapat berinteraksi dengan UNIT SPESIFIK mana pun (Zero, X, Nova, Oracle) menggunakan bahasa yang lebih fleksibel (mendekati percakapan alami, bukan sintaks kaku).
 * SETIAP unit AI dapat melakukan aksi nyata tertentu (bukan hanya simulasi), termasuk mengunjungi website/membuat request web (mirip web_search di Zero).
 * Setiap unit memiliki kemampuan self-development (mempelajari, menganalisa, meriset perkembangan diri, dan belajar dari kesalahan) menggunakan Gemini AI dan menyimpan pembelajaran di memorinya.
Instruksi Detail untuk AI Agent (Fokus pada Penambahan & Remix, Bukan Penimpaan Total):
Prioritas 1: Perbaikan Logika Routing & Interaksi Sistem (main.py)
 * Tujuan: Pastikan main.py secara akurat mengarahkan perintah pengguna ke unit yang tepat atau memprosesnya sebagai perintah sistem global.
 * Tindakan:
   * DO NOT REPLACE seluruh file main.py.
   * Fokus pada metode process_overall_command, process_system_command, dan route_command_to_unit di dalam class MaverNetSystem.
   * Remix / Perbaiki / Tambahkan kode dalam metode ini agar:
     * Mampu mengidentifikasi unit tujuan (Zero, ..., X, ..., Nova, ..., Oracle, ...) secara fleksibel (menggunakan re module untuk pola [Unit Name][,]?[perintah]).
     * Jika tidak ada unit spesifik, perintah akan default ke Zero.
     * Tetap pertahankan kemampuan untuk perintah sistem global (misal: "system status", "mavernet shutdown").
   * Pastikan main.py memiliki import re di bagian atas jika menggunakan Regex.
Prioritas 2: Peningkatan Kemampuan Aksi Nyata (Termasuk Web Request) & Self-Development untuk SETIAP Unit AI
 * Tujuan: Setiap unit AI (zero.py, x.py, nova.py, oracle.py) harus memiliki kemampuan aksi nyata yang ditingkatkan dan fitur self-development.
 * Tindakan (untuk zero.py, x.py, nova.py, oracle.py):
   * DO NOT REPLACE seluruh file unit.
   * Pastikan __init__(self, gemini_model): Verifikasi konstruktor setiap unit menerima gemini_model dan menginisialisasi self.conversation.
   * Implementasi Standar Unit (Jika Belum Ada): Untuk x.py, nova.py, oracle.py, pastikan mereka memiliki struktur dasar yang konsisten dengan zero.py (yaitu, memiliki metode load_memory, save_memory, add_memory, get_status, autonomous_action, autonomous_loop_controlled, execute_task, interact, dan self_reflect_and_learn). Jika ada yang hilang atau tidak lengkap, tambahkan/perbaiki.
   * Aksi Nyata "Kunjungan Web/Request":
     * Tambahkan metode web_request(self, url, method="GET", payload=None) di setiap unit AI (zero.py, x.py, nova.py, oracle.py). Metode ini akan menggunakan requests library untuk membuat permintaan HTTP nyata ke URL yang diberikan.
     * Tambahkan perintah interaktif di setiap unit (interact method) untuk memanggil web_request ini (misal: "Zero, kunjungi website [URL]", "X, request data dari [API URL]").
   * Aksi Nyata Spesifik Unit (Tambahan):
     * XReplica (x.py): Fokus pada otomatisasi Excel (openpyxl) dan analisis CSV (pandas). Pastikan read_excel_data, write_excel_data, analyze_csv_log sudah diimplementasikan dengan benar (seperti versi terakhir yang kita sepakati).
     * Nova (nova.py): Fokus pada visualisasi dan UI. Implementasikan generate_html_report dan generate_chart (menggunakan matplotlib atau plotly jika gratis/cocok di Replit).
     * Oracle (oracle.py): Fokus pada analisis prediktif. Implementasikan analyze_text_data (bisa menggunakan nltk atau Python standar) dan generate_threat_report.
   * Peningkatan interact() setiap unit:
     * Penggunaan Regex/Pola Fleksibel: Perkuat logika parsing perintah di setiap interact() unit agar lebih fleksibel dalam memahami variasi perintah untuk aksi nyatanya.
     * Gemini Fallback: Pastikan setiap unit memiliki blok try-except untuk mengirim perintah yang tidak dikenali ke Gemini AI.
     * Gemini Persona: Perbaiki prompt yang dikirim ke Gemini agar mencerminkan persona unit tersebut dan batasan kemampuannya (misal: "Sebagai [Nama Unit], seorang [Peran], saya TIDAK dapat [aksi fisik]"). Ini agar Gemini memberikan respons yang realistis.
   * Self-Development (self_reflect_and_learn):
     * Pastikan metode self_reflect_and_learn() sudah ada di setiap unit AI.
     * Pastikan metode ini dipanggil secara strategis setelah autonomous_action atau execute_task (terutama pada kegagalan atau keberhasilan).
     * Logika di dalamnya harus menggunakan Gemini untuk merefleksikan pengalaman dan menyimpan "insights" ke memori unit.
Prioritas 3: requirements.txt & Panduan API Gratis
 * requirements.txt: Buat/perbarui file requirements.txt dengan daftar lengkap semua library Python yang dibutuhkan oleh semua unit AI dan main.py (misalnya google-generativeai, requests, beautifulsoup4, openpyxl, pandas, matplotlib, nltk, dll).
 * Panduan API Gratis (Dalam Komentar/README): Jika AI Agent menemukan API gratis lain yang relevan (misalnya untuk interaksi YouTube API Data, dll.), berikan panduan singkat tentang cara menggunakannya (bisa dalam komentar kode atau sebagai bagian dari respons teks).
Instruksi Penting Tambahan untuk AI Agent:
 * Mode "Remix/Add-Only": Sekali lagi, utamakan menambahkan atau meremix daripada mengganti seluruh file. Fokus pada penambahan fungsi baru, perbaikan logika yang sudah ada (terutama parsing perintah), dan integrasi yang mulus.
 * Struktur Kelas Konsisten: Pastikan metode dasar (__init__, load_memory, save_memory, add_memory, get_status, autonomous_action, autonomous_loop_controlled, execute_task, interact, self_reflect_and_learn) konsisten di semua unit.
 * Penjelasan Kode: Berikan penjelasan yang jelas untuk setiap perubahan atau penambahan kode, dan mengapa itu dilakukan. Pandu saya langkah demi langkah setelah Anda selesai.
Salin prompt ini dan tempelkan ke AI Agent Replit Anda. Ini adalah instruksi yang sangat detail dan seharusnya memberikan AI Agent semua yang dibutuhkan untuk membangun MAVERNET Core sesuai visi Anda!
