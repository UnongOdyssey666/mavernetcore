Tentu! Itu adalah penambahan yang sangat cerdas untuk prompt. Anda ingin setiap unit AI tidak hanya memiliki skill yang didukung library, tetapi juga kemampuan self-development (belajar, menganalisa, meriset perkembangan sendiri, dan belajar dari kesalahan) serta menyimpan semua itu di memorinya. Kemudian, memastikan backup ke GitHub.
Ini adalah pembaruan prompt untuk AI Agent Replit Anda, dengan penambahan pada bagian Self-Development & Pembelajaran dari Kesalahan:
Prompt untuk AI Agent Replit: Integrasi Gemini & Aksi Nyata (Tanpa Menimpa Kode Esensial) - Dengan Self-Development
Konteks Proyek Saat Ini:
Saya sedang mengembangkan sistem orkestrasi AI multi-unit bernama "MAVERNET Core". Proyek saya sudah memiliki struktur file sebagai berikut (dan isinya sudah mendekati versi terakhir yang kita diskusikan, kecuali integrasi Gemini ke semua unit dan penambahan aksi nyata yang detail):
 * main.py: Ini adalah orkestrator utama (MaverNetSystem). Sudah menginisialisasi unit-unit (Zero, XReplica, Nova, Oracle). Sudah ada loop interaktif Command Dashboard.
 * zero.py: Mengandung kelas Zero. Sudah memiliki dasar AI, manajemen memori persisten (data/memory_log.json), simulasi aksi otonom, dan kemampuan web_search yang nyata (menggunakan requests dan BeautifulSoup).
 * x.py: (Mungkin masih dasar atau kosong).
 * nova.py: (Mungkin masih dasar atau kosong).
 * oracle.py: (Mungkin masih dasar atau kosong).
 * Folder data/: Untuk menyimpan memori.
 * API Key Gemini: Sudah disimpan di Replit Secrets dengan nama GEMINI_API_KEY.
Tujuan Pengembangan Anda dengan Bantuan AI Agent (Prioritas Berurutan):
Prioritas 1: Memastikan Struktur & Interaksi Sistem Optimal (Remix & Perbaiki main.py)
 * Tinjau dan Perbaiki main.py: Ambil kode main.py saya yang sekarang dan perbaiki/remix agar:
   * Memiliki loop interaktif Command Dashboard yang stabil dan tidak langsung berakhir.
   * Mampu mengarahkan perintah dari pengguna ke unit AI yang tepat (misalnya, "Zero, [perintah Zero]", "X, [perintah X]", "Nova, [perintah Nova]", "Oracle, [perintah Oracle]").
   * Mampu memproses perintah sistem global (misalnya, "System status", "Save all memory", "MaverNet shutdown").
   * Pastikan Zero tetap menjadi unit default untuk perintah yang tidak spesifik ditujukan ke unit lain.
   * JANGAN menimpa fungsi-fungsi inti yang sudah ada di main.py (get_all_missions, ai_autonomous_thinking, system_boot, load_all_data, system_status, save_all_memory, auto_github_sync), hanya perbaiki dan tambahkan yang diperlukan.
Prioritas 2: Integrasi Google Gemini API ke Semua Unit (Zero, XReplica, Nova, Oracle)
 * Konfigurasi Global Gemini (di main.py):
   * Pastikan di main.py, Anda melakukan import google.generativeai as genai dan genai.configure(api_key=os.environ.get("GEMINI_API_KEY")) serta global_gemini_model = genai.GenerativeModel('gemini-pro') di level global (di luar kelas MaverNetSystem). Jika sudah ada, jangan ulangi.
   * Pastikan MaverNetSystem.__init__ meneruskan gemini_model=global_gemini_model ke setiap unit AI saat diinisialisasi (misal: self.zero = Zero(gemini_model=global_gemini_model)).
 * Integrasi Gemini ke Setiap Unit AI (Zero, XReplica, Nova, Oracle):
   * Untuk setiap file unit (zero.py, x.py, nova.py, oracle.py):
     * Perbarui __init__(self, gemini_model): Ubah konstruktor (__init__) agar menerima gemini_model sebagai argumen.
     * Inisialisasi Konversasi Gemini: Tambahkan self.gemini_model = gemini_model dan self.conversation = self.gemini_model.start_chat(history=[]) di __init__ setiap unit.
     * Perbarui interact(self, command):
       * Tambahkan logika fallback ke Gemini: Di setiap metode interact() setiap unit, setelah semua perintah spesifik unit diproses (misal, web_search untuk Zero, read_spreadsheet untuk X, dll.), tambahkan blok try-except untuk memanggil self.conversation.send_message(command) jika tidak ada perintah spesifik yang cocok. Ini akan membuat setiap unit bisa menjawab pertanyaan umum.
       * Pastikan import google.generativeai as genai dan import os ada di setiap file unit.
       * Hapus konfigurasi Gemini lokal (jika ada): Pastikan genai.configure(...) atau model = genai.GenerativeModel(...) TIDAK ada di level global di dalam file unit .py masing-masing, karena sudah dikonfigurasi dan diteruskan dari main.py.
Prioritas 3: Implementasi Aksi Nyata Tambahan (Bahasa Penuh Library) untuk Setiap Unit (Tanpa Menimpa)
Instruksi Umum untuk Aksi Nyata (untuk setiap unit):
 * Untuk setiap aksi nyata yang baru, buatlah sebuah metode di kelas unit tersebut (misal read_spreadsheet di XReplica, generate_html_report di Nova).
 * Kemudian, tambahkan logika parsing perintah dan panggilan ke metode ini di dalam metode interact() unit yang bersangkutan (menggunakan pola re atau if sederhana).
 * Pastikan semua aksi nyata ini mencatat hasilnya ke self.add_memory() unit tersebut.
 * Untuk XReplica (di x.py):
   * Perbaiki/Tambahkan Kelas XReplica: Jika file x.py masih dasar, isi dengan struktur dasar yang mirip zero.py (termasuk load_memory, save_memory, add_memory, get_status, autonomous_action).
   * Otomatisasi Spreadsheet Nyata:
     * Implementasikan fungsi execute_task (atau fungsi baru lain) yang bisa:
       * Membaca data dari file Excel (misal .xlsx): Gunakan openpyxl. Buat fungsi read_excel_data(file_path) yang mengembalikan data.
       * Menulis data ke file Excel: Gunakan openpyxl. Buat fungsi write_excel_data(file_path, data).
     * Tambahkan contoh perintah interaktif di XReplica.interact() untuk memanggil fungsi-fungsi ini (misal: "X, baca Excel data.xlsx", "X, tulis Excel output.xlsx [data]").
   * Pencarian Webhook/Log (Opsional, jika ada ide): Jika ada library Python untuk simulasi interaksi webhook atau analisis log sederhana, tambahkan contohnya.
 * Untuk Nova (di nova.py):
   * Perbaiki/Tambahkan Kelas Nova: Isi dengan struktur dasar yang mirip zero.py.
   * Visualisasi Data Nyata:
     * Implementasikan fungsi execute_task (atau fungsi baru lain) yang bisa:
       * Membuat grafik sederhana: Gunakan matplotlib.pyplot. Buat fungsi generate_chart(data, title, file_name) yang menghasilkan dan menyimpan gambar grafik (.png).
       * Menghasilkan laporan HTML interaktif sederhana: Yang bisa menyertakan grafik atau tabel.
     * Tambahkan contoh perintah interaktif di Nova.interact() (misal: "Nova, buat grafik bar [data]", "Nova, laporan HTML judul [judul]").
 * Untuk Oracle (di oracle.py):
   * Perbaiki/Tambahkan Kelas Oracle: Isi dengan struktur dasar yang mirip zero.py.
   * Analisis Data Nyata (Sederhana):
     * Implementasikan fungsi execute_task (atau fungsi baru lain) yang bisa:
       * Melakukan analisis teks dasar: Misalnya menghitung frekuensi kata, panjang rata-rata kata, atau analisis sentimen sangat sederhana (menggunakan nltk jika memungkinkan).
       * Melakukan perhitungan statistik dasar: Dari daftar angka yang diberikan (rata-rata, median, standar deviasi) menggunakan numpy.
       * Menghasilkan laporan analisis ke file teks.
     * Tambahkan contoh perintah interaktif di Oracle.interact() (misal: "Oracle, analisis teks [teks]", "Oracle, hitung statistik [angka]").
Prioritas 4: Self-Development & Pembelajaran dari Kesalahan untuk Setiap Unit
 * Untuk Setiap Unit AI (Zero, XReplica, Nova, Oracle):
   * Tambahkan Metode self_reflect_and_learn(self):
     * Metode ini akan dipanggil secara berkala (misal, setelah autonomous_action atau execute_task yang gagal/berhasil).
     * Di dalam metode ini, unit akan:
       * Menganalisis Memori: Membaca entri memori terakhirnya, terutama yang bertipe "task_execution" atau "autonomous_action" yang memiliki status success: False (gagal) atau success: True (berhasil).
       * Gunakan Gemini untuk Refleksi: Kirimkan ringkasan pengalaman (terutama kegagalan) ke Gemini dengan prompt seperti: "Saya [nama unit] baru saja mencoba [aksi/tugas] dengan hasil [sukses/gagal]. Apa yang bisa saya pelajari? Berikan saran untuk meningkatkan kinerja saya di masa depan."
       * Simpan Pembelajaran: Catat saran atau "insight" dari Gemini ke dalam memori unit (self.add_memory) dengan tipe "self_reflection" atau "lesson_learned".
       * Update Strategi/Pengetahuan: Secara simulasi, indikasikan bahwa unit telah mengupdate strategi internalnya berdasarkan pembelajaran ini. Ini dapat berupa penyesuaian sederhana pada probabilitas aksi otonom, atau mencatat "aturan baru" di knowledge_base (jika ada).
   * Integrasi Panggilan Refleksi: Panggil self.self_reflect_and_learn():
     * Setelah setiap execute_task (khususnya jika gagal).
     * Secara berkala di dalam autonomous_action.
     * Sebagai bagian dari system_boot atau ai_autonomous_thinking di main.py untuk pemicu refleksi global.
   * Belajar Cepat dari Kesalahan (Simulasi): Libatkan Gemini untuk memberikan "saran perbaikan" secara langsung ketika suatu tugas gagal, dan catat itu di memori sebagai "error_analysis" atau "improvement_plan".
Bagian 5: Pembaruan requirements.txt
 * Buat/perbarui file requirements.txt dengan daftar semua library Python yang dibutuhkan oleh semua unit AI dan main.py (termasuk google-generativeai, requests, beautifulsoup4, openpyxl, matplotlib, numpy, nltk, dll., sesuai dengan implementasi aksi nyata yang Anda berikan).
Instruksi Penting Tambahan untuk AI Agent:
 * Mode "Remix/Add-Only": Ingat bahwa prioritas utama adalah TIDAK menimpa kode yang sudah ada. Identifikasi bagian mana yang perlu diperbaiki, ditambahkan, atau diintegrasikan.
 * Struktur Kelas Konsisten: Pastikan setiap unit AI (XReplica, Nova, Oracle) memiliki metode __init__, load_memory, save_memory, add_memory, get_status, autonomous_action, execute_task, dan interact yang konsisten (mirip dengan zero.py). Jika unit belum memiliki metode tersebut, tambahkan stub-nya.
 * Penjelasan Kode: Berikan penjelasan yang jelas untuk setiap bagian kode baru atau perubahan, dan mengapa itu dilakukan. Jelaskan juga cara menginstal library baru (jika ada).
Dengan prompt yang komprehensif ini, Anda telah memberikan instruksi yang sangat detail kepada AI Agent Replit untuk membangun sistem MAVERNET Core yang cerdas dan mampu berevolusi secara mandiri.
